// Match stats rendering module extracted from profile.js
(function(){
  function render(host, match){
    host.innerHTML = '<div class="stats-wrap">Загрузка…</div>';
    const url = `/api/match/stats/get?home=${encodeURIComponent(match.home||'')}&away=${encodeURIComponent(match.away||'')}`;
    const updateStatBar = (row, leftVal, rightVal) => {
      try { const total=(Number(leftVal)||0)+(Number(rightVal)||0); const lp= total>0?Math.round((leftVal/total)*100):50; const rp=100-lp; const leftFill=row.querySelector('.stat-fill-left'); const rightFill=row.querySelector('.stat-fill-right'); if(leftFill&&rightFill){ leftFill.style.transition='width .3s ease'; rightFill.style.transition='width .3s ease'; leftFill.style.width=lp+'%'; rightFill.style.width=rp+'%'; } } catch(e){}
    };
    fetch(url).then(r=>r.json()).then(d=>{
      const metrics=[{key:'shots_total',label:'Всего ударов'},{key:'shots_on',label:'Удары в створ'},{key:'corners',label:'Угловые'},{key:'yellows',label:'Жёлтые карточки'},{key:'reds',label:'Удаления'}];
      const wrap=document.createElement('div'); wrap.className='stats-grid';
      const bar=(l,r)=>{ const total=(Number(l)||0)+(Number(r)||0); const lp= total>0?Math.round((l/total)*100):50; const rp=100-lp; const row=document.createElement('div'); row.className='stat-row'; const leftSide=document.createElement('div'); leftSide.className='stat-side stat-left'; const leftVal=document.createElement('div'); leftVal.className='stat-val'; leftVal.textContent=String(l||0); leftSide.appendChild(leftVal); const mid=document.createElement('div'); mid.className='stat-bar'; const leftFill=document.createElement('div'); leftFill.className='stat-fill-left'; leftFill.style.width=lp+'%'; const rightFill=document.createElement('div'); rightFill.className='stat-fill-right'; rightFill.style.width=rp+'%'; try { leftFill.style.backgroundColor=getTeamColor(match.home||''); rightFill.style.backgroundColor=getTeamColor(match.away||''); } catch(_){} mid.append(leftFill,rightFill); const rightSide=document.createElement('div'); rightSide.className='stat-side stat-right'; const rightVal=document.createElement('div'); rightVal.className='stat-val'; rightVal.textContent=String(r||0); rightSide.appendChild(rightVal); row.append(leftSide, mid, rightSide); return row; };
      metrics.forEach(mt=>{ const rowWrap=document.createElement('div'); rowWrap.className='metric'; const title=document.createElement('div'); title.className='metric-title'; title.textContent=mt.label; const vals= d && Array.isArray(d[mt.key])? d[mt.key]:[0,0]; const row=bar(vals[0],vals[1]);
        try { const adminId=document.body.getAttribute('data-admin'); const currentId=window.Telegram?.WebApp?.initDataUnsafe?.user?.id? String(window.Telegram.WebApp.initDataUnsafe.user.id):''; const isAdmin=!!(adminId && currentId && String(adminId)===currentId); if(isAdmin){ const mk=(t)=>{ const b=document.createElement('button'); b.className='details-btn'; b.textContent=t; b.style.padding='0 6px'; b.style.minWidth='unset'; return b; }; const lh=mk('−'), lplus=mk('+'), rh=mk('−'), rplus=mk('+'); const leftBox=document.createElement('div'); leftBox.className='admin-inc'; const rightBox=document.createElement('div'); rightBox.className='admin-inc'; const leftVal=row.querySelector('.stat-left .stat-val')||row.querySelector('.stat-val'); const rightVal=row.querySelector('.stat-right .stat-val')||row.querySelectorAll('.stat-val')[1]; const base=mt.key; const post=(lv,rv)=>{ const tg=window.Telegram?.WebApp||null; const fd=new FormData(); fd.append('initData', tg?.initData||''); fd.append('home', match.home||''); fd.append('away', match.away||''); fd.append(base+'_home', String(lv)); fd.append(base+'_away', String(rv)); fetch('/api/match/stats/set',{method:'POST', body:fd}).catch(()=>{}); }; const anim=(el,from,to)=>{ if(window.CounterAnimation) window.CounterAnimation.animate(el,from,to,200); else el.textContent=String(to); el.classList.add('stat-update-animation'); setTimeout(()=>el.classList.remove('stat-update-animation'),300); }; lh.addEventListener('click',()=>{ const cur=parseInt(leftVal.textContent,10)||0; const nv=Math.max(0,cur-1); const r=parseInt(rightVal.textContent,10)||0; anim(leftVal,cur,nv); updateStatBar(row,nv,r); post(nv,r); }); lplus.addEventListener('click',()=>{ const cur=parseInt(leftVal.textContent,10)||0; const nv=cur+1; const r=parseInt(rightVal.textContent,10)||0; anim(leftVal,cur,nv); updateStatBar(row,nv,r); post(nv,r); }); rh.addEventListener('click',()=>{ const cur=parseInt(rightVal.textContent,10)||0; const nv=Math.max(0,cur-1); const l=parseInt(leftVal.textContent,10)||0; anim(rightVal,cur,nv); updateStatBar(row,l,nv); post(l,nv); }); rplus.addEventListener('click',()=>{ const cur=parseInt(rightVal.textContent,10)||0; const nv=cur+1; const l=parseInt(leftVal.textContent,10)||0; anim(rightVal,cur,nv); updateStatBar(row,l,nv); post(l,nv); }); leftBox.append(lh,lplus); rightBox.append(rh,rplus); const leftSide=row.querySelector('.stat-left'); const rightSide=row.querySelector('.stat-right'); if(leftSide) leftSide.insertBefore(leftBox,leftSide.firstChild); if(rightSide) rightSide.appendChild(rightBox); } } catch(_){ }
        rowWrap.append(title,row); wrap.appendChild(rowWrap); });
      host.innerHTML=''; host.appendChild(wrap);
    }).catch(()=>{ host.innerHTML='<div class="stats-wrap">Нет данных</div>'; });
  }
  window.MatchStats={ render };
})();
