// Specials (penalty/redcard flags + partial/ full settle)
(function(){
  function render(host, match){
    const tg=window.Telegram?.WebApp||null; host.innerHTML=''; const shell=document.createElement('div'); shell.className='admin-panel'; shell.style.marginTop='8px'; shell.style.padding='8px'; shell.style.border='1px solid rgba(255,255,255,0.1)'; shell.style.borderRadius='10px';
    const title=document.createElement('div'); title.style.marginBottom='6px'; title.textContent='Спецсобытия матча';
    const statusRow=document.createElement('div'); statusRow.style.display='flex'; statusRow.style.gap='8px'; statusRow.style.alignItems='center'; statusRow.style.marginBottom='6px';
    const sLab=document.createElement('div'); sLab.textContent='Статус:'; const sBadge=document.createElement('span'); sBadge.className='status-badge';
    const updStatus=async()=>{ try { const r=await fetch(`/api/match/status/get?home=${encodeURIComponent(match.home||'')}&away=${encodeURIComponent(match.away||'')}`); const d=await r.json(); let txt='Запланирован'; if(d?.status==='live') txt='Матч идет'; else if(d?.status==='finished') txt='Матч завершен'; else if(d?.soon) txt='Скоро начнется'; sBadge.textContent=txt; } catch(_) { sBadge.textContent='—'; } };
    statusRow.append(sLab,sBadge);
    const row1=document.createElement('div'); row1.style.display='flex'; row1.style.gap='8px'; row1.style.alignItems='center'; const lab1=document.createElement('div'); lab1.textContent='Пенальти:'; const sel1=document.createElement('select'); sel1.innerHTML='<option value="">—</option><option value="1">Да</option><option value="0">Нет</option>'; row1.append(lab1, sel1);
    const row2=document.createElement('div'); row2.style.display='flex'; row2.style.gap='8px'; row2.style.alignItems='center'; row2.style.marginTop='6px'; const lab2=document.createElement('div'); lab2.textContent='Красная:'; const sel2=document.createElement('select'); sel2.innerHTML='<option value="">—</option><option value="1">Да</option><option value="0">Нет</option>'; row2.append(lab2, sel2);
    const actions=document.createElement('div'); actions.style.marginTop='8px'; actions.style.display='flex'; actions.style.gap='8px'; actions.style.flexWrap='wrap';
    const savePenalty=document.createElement('button'); savePenalty.className='app-btn neutral'; savePenalty.textContent='Сохранить и рассчитать пенальти';
    const saveRed=document.createElement('button'); saveRed.className='app-btn neutral'; saveRed.textContent='Сохранить и рассчитать красную';
    const settleMatchBtn=document.createElement('button'); settleMatchBtn.className='app-btn danger'; settleMatchBtn.textContent='Рассчитать матч';
    actions.append(savePenalty, saveRed, settleMatchBtn);
    shell.append(title,statusRow,row1,row2,actions); host.appendChild(shell);
    updStatus(); const stId=setInterval(updStatus,30000); try { host.__onclose=()=>clearInterval(stId); } catch(_){}
    fetch(`/api/specials/get?home=${encodeURIComponent(match.home||'')}&away=${encodeURIComponent(match.away||'')}`)
      .then(r=>r.json()).then(d=>{ try { if(d.penalty_yes===1) sel1.value='1'; else if(d.penalty_yes===0) sel1.value='0'; else sel1.value=''; if(d.redcard_yes===1) sel2.value='1'; else if(d.redcard_yes===0) sel2.value='0'; else sel2.value=''; } catch(_){} }).catch(()=>{});
    const saveAndSettle=async(market)=>{ const fd=new FormData(); fd.append('initData', tg?.initData||''); fd.append('home', match.home||''); fd.append('away', match.away||''); if(market==='penalty'){ if(sel1.value===''){ window.showAlert?.('Укажите значение для Пенальти','warning'); return;} fd.append('penalty_yes', sel1.value);} else if(market==='redcard'){ if(sel2.value===''){ window.showAlert?.('Укажите значение для Красной карточки','warning'); return;} fd.append('redcard_yes', sel2.value);} const btn= market==='penalty'? savePenalty: saveRed; const old=btn.textContent; btn.disabled=true; btn.textContent='Сохранение...'; try { const r=await fetch('/api/specials/set',{method:'POST', body:fd}); const d=await r.json().catch(()=>({})); if(!r.ok||d?.error) throw new Error(d?.error||'Ошибка сохранения'); const fd2=new FormData(); fd2.append('initData', tg?.initData||''); fd2.append('home', match.home||''); fd2.append('away', match.away||''); fd2.append('market', market); const r2=await fetch('/api/specials/settle',{method:'POST', body:fd2}); const d2=await r2.json().catch(()=>({})); if(!r2.ok||d2?.error) throw new Error(d2?.error||'Ошибка расчёта'); window.showAlert?.(`Готово: изменено ${d2.changed||0}, выиграло ${d2.won||0}, проиграло ${d2.lost||0}`,'success'); } catch(e){ console.error('specials save/settle error',e); window.showAlert?.(e?.message||'Ошибка операции','error'); } finally { btn.disabled=false; btn.textContent=old; } };
    savePenalty.addEventListener('click',()=>saveAndSettle('penalty'));
    saveRed.addEventListener('click',()=>saveAndSettle('redcard'));
    const confirmSettle=()=> new Promise(resolve=>{ let ov=document.querySelector('.modal-overlay'); if(!ov){ ov=document.createElement('div'); ov.className='modal-overlay'; ov.style.position='fixed'; ov.style.inset='0'; ov.style.background='rgba(0,0,0,0.6)'; ov.style.zIndex='9999'; ov.style.display='flex'; ov.style.alignItems='center'; ov.style.justifyContent='center'; const box=document.createElement('div'); box.className='modal-box'; box.style.background='rgba(20,24,34,0.98)'; box.style.border='1px solid rgba(255,255,255,0.12)'; box.style.borderRadius='14px'; box.style.width='min(92vw,420px)'; box.style.padding='14px'; box.innerHTML='<div style="font-weight:700; font-size:16px; margin-bottom:8px;">Завершить и рассчитать матч?</div><div style="opacity:.9; font-size:13px; line-height:1.35; margin-bottom:12px;">Действие необратимо. Будут рассчитаны все ставки по матчу, а незаполненные спецсобытия зафиксируются как «Нет».</div><div style="display:flex; gap:8px; justify-content:flex-end; flex-wrap:wrap;"><button class="app-btn neutral" id="ms-cancel">Отмена</button><button class="app-btn danger" id="ms-ok">Да, рассчитать</button></div>'; ov.appendChild(box); document.body.appendChild(ov); box.querySelector('#ms-cancel').onclick=()=>{ ov.remove(); resolve(false); }; box.querySelector('#ms-ok').onclick=()=>{ ov.remove(); resolve(true); }; } else { resolve(false);} });
    settleMatchBtn.addEventListener('click', async()=>{ const ok=await confirmSettle(); if(!ok) return; const btn=settleMatchBtn; const old=btn.textContent; btn.disabled=true; btn.textContent='Расчет...'; try { const fd=new FormData(); fd.append('initData', tg?.initData||''); fd.append('home', match.home||''); fd.append('away', match.away||''); const r=await fetch('/api/match/settle',{method:'POST', body:fd}); const d=await r.json().catch(()=>({})); if(!r.ok||d?.error) throw new Error(d?.error||'Ошибка расчёта матча'); window.showAlert?.(`Готово: изменено ${d.changed||0}, выиграло ${d.won||0}, проиграло ${d.lost||0}`,'success'); try { const dateStr=(match?.datetime||match?.date||'').toString().slice(0,10); const key=`stream:${(match.home||'').toLowerCase().trim()}__${(match.away||'').toLowerCase().trim()}__${dateStr}`; localStorage.removeItem(key); const root=document.getElementById('ufo-match-details'); const tab=root?.querySelector('.modal-subtabs [data-mdtab="stream"]'); const pane=document.getElementById('md-pane-stream'); if(tab) tab.remove(); if(pane){ pane.style.display='none'; pane.innerHTML='<div class="stream-wrap"><div class="stream-skeleton">Трансляция недоступна</div></div>'; } const finStore=(window.__FINISHED_MATCHES=window.__FINISHED_MATCHES||{}); const mkKey=(mm)=>{ try { const dstr=(mm?.datetime||mm?.date||'').toString().slice(0,10); return `${(mm.home||'').toLowerCase().trim()}__${(mm.away||'').toLowerCase().trim()}__${dstr}`; } catch(_) { return `${(mm.home||'').toLowerCase().trim()}__${(mm.away||'').toLowerCase().trim()}__`; } }; finStore[mkKey(match)]=true; } catch(_){} } catch(e){ console.error('match settle error',e); window.showAlert?.(e?.message||'Ошибка расчёта','error'); } finally { btn.disabled=false; btn.textContent=old; } });
  }
  window.MatchSpecials={ render };
})();
