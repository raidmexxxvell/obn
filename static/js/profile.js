// static/js/profile.js
document.addEventListener('DOMContentLoaded', () => {
    const tg = window.Telegram?.WebApp || null;
    const splash = document.getElementById('splash');
    const loadingProgress = document.getElementById('loading-progress');
    const appContent = document.getElementById('app-content');

    // –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
    if (tg) {
        try {
            tg.ready(); // –°–æ–æ–±—â–∞–µ–º Telegram, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ
            tg.expand(); // –†–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω
            console.log('Telegram WebApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram WebApp:', e);
        }
    }

    const elements = {
        userName: document.getElementById('user-name'),
        userAvatarImg: document.querySelector('#user-avatar img'),
        credits: document.getElementById('credits'),
        level: document.getElementById('level'),
        xp: document.getElementById('xp'),
        currentLevel: document.getElementById('current-level'),
        currentXp: document.getElementById('current-xp'),
        xpNeeded: document.getElementById('xp-needed'),
        xpProgress: document.getElementById('xp-progress'),
        checkinDays: document.getElementById('checkin-days'),
        checkinBtn: document.getElementById('checkin-btn'),
        checkinStatus: document.getElementById('checkin-status'),
        currentStreak: document.getElementById('current-streak'),
        badgesContainer: document.getElementById('badges'),
        achievementPlaceholder: document.getElementById('achievement-placeholder'),
        editName: document.getElementById('edit-name')
    };

    function startLoadingAnimation() {
        if (!loadingProgress) {
            console.warn('–≠–ª–µ–º–µ–Ω—Ç loadingProgress –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return () => {};
        }
        
        let progress = 0;
        const interval = setInterval(() => {
            progress += Math.floor(Math.random() * 5) + 1;
            if (progress >= 95) {
                progress = 95;
            }
            loadingProgress.style.width = `${progress}%`;
        }, 150);

        return () => { 
            clearInterval(interval); 
            if (loadingProgress) {
                loadingProgress.style.width = '100%';
            }
        };
    }

    function initApp() {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
        
        // –µ—Å–ª–∏ tg –µ—Å—Ç—å, –Ω–æ –≤ –Ω—ë–º –Ω–µ—Ç user ‚Äî —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
        if (tg && !tg.initDataUnsafe?.user) {
            console.warn('Telegram WebApp present but initDataUnsafe.user missing');
            // –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º ‚Äî –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –∑–∞–≥–ª—É—à–∫–æ–π
        }

        const cancelLoading = startLoadingAnimation();
        console.log("‚è≥ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞");

        // –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ (–≤ dev —Ä–µ–∂–∏–º–µ –≤–µ—Ä–Ω—ë–º –∑–∞–≥–ª—É—à–∫—É)
        Promise.all([fetchUserData(), fetchAchievements()])
            .then(results => {
                console.log("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã", results);
            })
            .catch(err => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if (elements.checkinStatus) {
                    elements.checkinStatus.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö';
                    setTimeout(() => {
                        if (elements.checkinStatus) elements.checkinStatus.textContent = '';
                    }, 3000);
                }
            })
            .finally(() => {
                console.log("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                cancelLoading();
                
                // –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –§–£–ù–ö–¶–ò–ò
                if (typeof window.hideSplash === 'function') {
                    console.log("‚û°Ô∏è –í—ã–∑–æ–≤ hideSplash");
                    window.hideSplash();
                } else {
                    console.error("‚ùå –§—É–Ω–∫—Ü–∏—è hideSplash –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞!");
                    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –∑–∞—Å—Ç–∞–≤–∫–∏
                    if (splash) {
                        splash.style.opacity = '0';
                        setTimeout(() => {
                            splash.style.display = 'none';
                            if (appContent) appContent.style.display = 'block';
                            document.body.classList.add('loaded');
                        }, 450);
                    }
                }
            });
    }

    function fetchUserData() {
        return new Promise((resolve, reject) => {
            if (!tg || !tg.initDataUnsafe?.user) {
                // dev-–∑–∞–≥–ª—É—à–∫–∞
                const dev = {
                    user_id: 0,
                    display_name: 'Dev User',
                    credits: 1000,
                    xp: 0,
                    level: 1,
                    consecutive_days: 0,
                    last_checkin_date: ''
                };
                console.log("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º dev-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
                renderUserProfile(dev);
                renderCheckinSection(dev);
                resolve(dev);
                return;
            }

            const formData = new FormData();
            formData.append('initData', tg.initData || '');
            formData.append('user', JSON.stringify(tg.initDataUnsafe.user));

            fetch('/api/user', { method: 'POST', body: formData })
                .then(res => {
                    if (res.status === 401) { 
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'); 
                        reject(new Error('Unauthorized'));
                        return; 
                    }
                    return res.json();
                })
                .then(data => { 
                    console.log("üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:", data);
                    renderUserProfile(data); 
                    renderCheckinSection(data); 
                    resolve(data); 
                })
                .catch(err => { 
                    console.error('‚ùå fetchUserData –æ—à–∏–±–∫–∞:', err); 
                    reject(err); 
                });
        });
    }

    function fetchAchievements() {
        return new Promise((resolve, reject) => {
            if (!tg || !tg.initDataUnsafe?.user) {
                console.log("üèÜ –ò—Å–ø–æ–ª—å–∑—É–µ–º dev-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π");
                const achievements = [{ tier:1, name:'–ë—Ä–æ–Ω–∑–∞', days:7, icon:'bronze', unlocked:false }];
                renderAchievements(achievements);
                resolve();
                return;
            }

            const formData = new FormData();
            formData.append('initData', tg.initData || '');
            formData.append('user_id', tg.initDataUnsafe.user.id);

            fetch('/api/achievements', { method: 'POST', body: formData })
                .then(res => res.json())
                .then(data => {
                    console.log("üéñÔ∏è –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã:", data.achievements);
                    renderAchievements(data.achievements || []);
                    resolve();
                })
                .catch(err => { 
                    console.error('‚ùå fetchAchievements –æ—à–∏–±–∫–∞:', err); 
                    const achievements = [{ tier:1, name:'–ë—Ä–æ–Ω–∑–∞', days:7, icon:'bronze', unlocked:false }];
                    renderAchievements(achievements);
                    resolve();
                });
        });
    }

    function renderUserProfile(user) {
        if (!user) return;
        console.log("üë§ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", user);
        if (elements.userAvatarImg && tg?.initDataUnsafe?.user?.photo_url) {
            elements.userAvatarImg.src = tg.initDataUnsafe.user.photo_url;
        }
        if (elements.userName) elements.userName.textContent = user.display_name || 'User';
        if (elements.credits) elements.credits.textContent = (user.credits || 0).toLocaleString();
        if (elements.level) elements.level.textContent = user.level || 1;

        const lvl = user.level || 1;
        const xpForNextLevel = lvl * 100;
        const currentXp = (user.xp || 0) % xpForNextLevel;
        if (elements.xp) elements.xp.textContent = `${currentXp}/${xpForNextLevel}`;
        if (elements.currentXp) elements.currentXp.textContent = currentXp;
        if (elements.xpNeeded) elements.xpNeeded.textContent = xpForNextLevel;
        if (elements.xpProgress) elements.xpProgress.style.width = `${Math.min(Math.max((xpForNextLevel ? (currentXp / xpForNextLevel) * 100 : 0),0),100)}%`;
    }

    function renderCheckinSection(user) {
        if (!elements.checkinDays) return;
        console.log("üìÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —á–µ–∫–∏–Ω–∞:", user);
        elements.checkinDays.innerHTML = '';
        const cycleDay = (user.consecutive_days % 7) || 7;
        if (elements.currentStreak) elements.currentStreak.textContent = user.consecutive_days || 0;

        for (let i=1; i<=7; i++) {
            const dayEl = document.createElement('div');
            dayEl.className = 'checkin-day';
            dayEl.textContent = i;
            if (i < cycleDay) dayEl.classList.add('completed');
            else if (i === cycleDay) dayEl.classList.add('active');
            elements.checkinDays.appendChild(dayEl);
        }

        const today = new Date().toISOString().split('T')[0];
        const lastCheckin = (user.last_checkin_date || '').split('T')[0];
        if (lastCheckin === today) {
            if (elements.checkinBtn) elements.checkinBtn.disabled = true;
            if (elements.checkinStatus) elements.checkinStatus.textContent = '‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è';
        } else {
            if (elements.checkinBtn) elements.checkinBtn.disabled = false;
            if (elements.checkinStatus) elements.checkinStatus.textContent = '';
        }
    }

    function renderAchievements(achievements) {
        if (elements.achievementPlaceholder) elements.achievementPlaceholder.remove();
        if (!elements.badgesContainer) return;
        console.log("üèÖ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:", achievements);
        elements.badgesContainer.innerHTML = ''; // –æ—á–∏—â–∞–µ–º
        if (!achievements || achievements.length === 0) return;
        const a = achievements[0];
        const card = document.createElement('div');
        card.className = `achievement-card ${a.unlocked ? '' : 'locked'}`;
        const icon = document.createElement('img');
        if (a.icon === 'bronze') {
            icon.src = '/static/img/achievements/bronze.png';
        } else if (a.icon === 'silver') {
            icon.src = '/static/img/achievements/silver.png';
        } else if (a.icon === 'gold') {
            icon.src = '/static/img/achievements/gold.png';
        } else {
            icon.src = a.icon ? `image/svg+xml;base64,PHN2...` : '';
        }
        icon.alt = a.name || 'badge';
        const name = document.createElement('div'); name.className='badge-name'; name.textContent = a.name;
        const req = document.createElement('div'); req.className='badge-requirements'; req.textContent = `${a.days} –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥`;
        card.append(icon, name, req);
        elements.badgesContainer.appendChild(card);
    }

    function handleCheckin() {
        if (!elements.checkinBtn) return;
        console.log("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ–∫–∏–Ω–∞");
        elements.checkinBtn.disabled = true;
        if (elements.checkinStatus) elements.checkinStatus.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';
        if (!tg || !tg.initDataUnsafe?.user) { 
            console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —á–µ–∫–∏–Ω –±–µ–∑ Telegram WebApp');
            if (elements.checkinStatus) elements.checkinStatus.textContent='–û—à–∏–±–∫–∞: –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
            if (elements.checkinBtn) elements.checkinBtn.disabled=false; 
            return; 
        }

        const formData = new FormData();
        formData.append('initData', tg.initData || '');
        formData.append('user_id', tg.initDataUnsafe.user.id);

        fetch('/api/checkin', { method:'POST', body: formData })
            .then(res => {
                if (res.status === 401) { 
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'); 
                    if (elements.checkinStatus) elements.checkinStatus.textContent='–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
                    tg?.close?.(); 
                    throw new Error('Unauthorized'); 
                }
                return res.json();
            })
            .then(data => {
                if (!data) return;
                if (data.status === 'already_checked') { 
                    if (elements.checkinStatus) elements.checkinStatus.textContent='‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞ —Å–µ–≥–æ–¥–Ω—è'; 
                    return; 
                }
                showRewardAnimation(data.xp, data.credits);
                fetchUserData(); fetchAchievements();
            })
            .catch(err => { 
                console.error('‚ùå checkin err', err); 
                if (elements.checkinStatus) elements.checkinStatus.textContent='–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã'; 
                if (elements.checkinBtn) elements.checkinBtn.disabled=false; 
            });
    }

    function handleNameChange() {
        if (!elements.userName) return;
        console.log("‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏");
        const newName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', elements.userName.textContent);
        if (!newName || !newName.trim() || newName === elements.userName.textContent) return;
        const original = elements.userName.textContent;
        elements.userName.textContent = '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...';
        if (!tg || !tg.initDataUnsafe?.user) { 
            console.error('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è –±–µ–∑ Telegram WebApp'); 
            elements.userName.textContent = original; 
            return; 
        }

        const formData = new FormData();
        formData.append('initData', tg.initData || '');
        formData.append('user_id', tg.initDataUnsafe.user.id);
        formData.append('new_name', newName.trim());

        fetch('/api/update-name', { method:'POST', body: formData })
        .then(res => { 
            if (res.status === 401) throw new Error('Unauthorized'); 
            return res.json(); 
        })
        .then(data => { 
            if (elements.userName) elements.userName.textContent = data.display_name; 
            showSuccessMessage('–ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!'); 
        })
        .catch(err => { 
            console.error('‚ùå update name err', err); 
            if (elements.userName) elements.userName.textContent = original; 
            showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è.'); 
        });
    }

    function showError(msg) { 
        if (elements.checkinStatus) { 
            elements.checkinStatus.textContent = msg; 
            elements.checkinStatus.style.color = 'var(--danger)'; 
            setTimeout(()=>{
                if (elements.checkinStatus) {
                    elements.checkinStatus.textContent='';
                    elements.checkinStatus.style.color='';
                }
            },3000);
        } else console.warn(msg); 
    }
    
    function showSuccessMessage(msg) { 
        if (elements.checkinStatus) { 
            elements.checkinStatus.textContent = msg; 
            elements.checkinStatus.style.color = 'var(--success)'; 
            setTimeout(()=>{
                if (elements.checkinStatus) {
                    elements.checkinStatus.textContent='';
                    elements.checkinStatus.style.color='';
                }
            },2000);
        } else console.log(msg); 
    }
    
    function showRewardAnimation(xp, credits) { 
        if (!elements.checkinStatus) return; 
        elements.checkinStatus.innerHTML = `<div class="reward-animation">+${xp} XP | +${credits} –∫—Ä–µ–¥–∏—Ç–æ–≤</div>`; 
        setTimeout(()=>{
            if (elements.checkinStatus) elements.checkinStatus.textContent='–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!'; 
        },2000); 
    }

    function setupEventListeners() {
        if (elements.checkinBtn) elements.checkinBtn.addEventListener('click', handleCheckin);
        if (elements.editName) { 
            elements.editName.style.cursor = 'pointer'; 
            elements.editName.addEventListener('click', handleNameChange); 
        }
    }

    // –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –¢–û–õ–¨–ö–û –ü–û–°–õ–ï –ì–û–¢–û–í–ù–û–°–¢–ò
    if (tg) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ Telegram WebApp –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        setTimeout(() => {
            console.log("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏");
            initApp();
        }, 100);
    } else {
        initApp();
    }
    
    setupEventListeners();
});
